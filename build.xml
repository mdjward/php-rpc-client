<?xml version="1.0"?>

<!--
    PHP-RPC application build script
    Author: M.D.Ward <dev@mattdw.co.uk>

    Optional Parameters:
    - ${COMPOSER_UPDATE}: Indicates whether update composer rather than reinstall; defaults fo "false"
    - ${COMPOSER_VENDOR_DIR}: Relative path to the composer vendors (libraries) dir; defaults to "vendor"
    - ${PHP_EXECUTABLE}: Relative or absolute path to the PHP executable; defaults to "php"
    - ${PHPUNIT_EXECUTABLE}: Relative or absolute path to the PHPUnit executable script; defaults to "phpunit"
    - ${APIGEN_EXECUTABLE}: Relative or absolute path to the APIGen executable script; defaults to "apigen"

    Parameters generated by this script using those defined above:
    - ${DO_COMPOSER_UPDATE}: Indicates whether or not the "composer update" following "composer install" will be invoked
    - ${PURGE_VENDORS}: Indicates that the composer vendors directory should be purged prior to "composer install"
-->

<project name="FerendaBuild" default="clean-build">

    <!-- Identify src, build and Symfony2-config directories referenced frequently throughout this build -->
    <property name="SRC_DIR" value="${basedir}/src"/>
    <property name="TEST_DIR" value="${basedir}/test"/>
    <property name="BUILD_DIR" value="${basedir}/build"/>
    
    <!-- Set defaults for properties which can have defaults -->
    <condition property="COMPOSER_VENDOR_DIR" else="vendor">
        <isset property="COMPOSER_VENDOR_DIR"/>
    </condition>
    <condition property="DO_COMPOSER_UPDATE" value="true" else="false">
        <and>
            <isset property="COMPOSER_UPDATE"/>
            <istrue value="${COMPOSER_UPDATE}"/>
        </and>
    </condition>
    <condition property="PURGE_VENDORS" value="true" else="false">
        <isfalse value="${DO_COMPOSER_UPDATE}"/>
    </condition>
    <condition property="PHP_EXECUTABLE" else="php">
        <isset property="PHP_EXECUTABLE"/>
    </condition>
    <condition property="PHPUNIT_EXECUTABLE" else="phpunit">
        <isset property="PHPUNIT_EXECUTABLE"/>
    </condition>
    <condition property="APIGEN_EXECUTABLE" else="apigen">
        <isset property="APIGEN_EXECUTABLE"/>
    </condition>
    
    <!-- Cleans the project, deleting the build directory and everything contained within -->
    <target name="clean">
        <delete dir="${BUILD_DIR}" failonerror="false"/>
    </target>

    <!-- Builds the project, invoking tasks defined below as dependencies -->
    <target name="build" depends="prepare,lint,test,doc">
        <echo>BUILD SUCCESSFUL</echo>
    </target>

    <!-- Prepares the project by creating the build directory (and all those underneath) if they do not already exist -->
    <target name="prepare">
        <mkdir dir="${BUILD_DIR}"/>
        <mkdir dir="${BUILD_DIR}/doc"/>
        <mkdir dir="${BUILD_DIR}/coverage"/>
        <mkdir dir="${BUILD_DIR}/logs"/>
    </target>

    <!-- Performs a lint (syntax) check on the PHP src code under ${SRC_DIR} -->
    <target name="lint">
        <!--  Action changed to "apply" from "parallel-apply" pending release of the ANT extension for the latter -->
        <apply executable="${PHP_EXECUTABLE}" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${SRC_DIR}">
                <include name="**/*.php"/>
            </fileset>
        </apply>
    </target>
    
    <!-- Carries out PHPUnit testing as per the phpunit.xml.dist config file under ${basedir}, which stipulates logging in JUnit-style XML -->
    <target name="test" depends="prepare,composer-install,composer-update">
        <exec executable="${PHPUNIT_EXECUTABLE}" failonerror="true">
            <arg value="-c"/>
            <arg path="${basedir}"/>
        </exec>
    </target>

    <!-- Creates API documentation -->
    <target name="doc" depends="prepare">
        <exec executable="${APIGEN_EXECUTABLE}" failonerror="true">
            <arg value="-s"/>
            <arg value="${SRC_DIR}"/>
            <arg value="-d"/>
            <arg value="${BUILD_DIR}/doc"/>
            <arg value="--progressbar=no"/>
        </exec>
    </target>
    
    <!-- Runs a composer install as a pre-requisite for unit testing -->
    <target name="composer-install" depends="composer-purge-vendors">
        <echo>Running composer install...</echo>
        <exec executable="${PHP_EXECUTABLE}" failonerror="false">
            <arg value="${basedir}/composer.phar"/>
            <arg value="install"/>
        </exec>
    </target>
    
    <!-- Runs a composer update to update dependencies; not for newly-checked out builds" -->
    <target name="composer-update" if="${DO_COMPOSER_UPDATE}">
        <echo>Running composer update...</echo>
        <exec executable="${PHP_EXECUTABLE}" failonerror="true">
            <arg value="${basedir}/composer.phar"/>
            <arg value="update"/>
        </exec>
    </target>
    
    <!-- Purges the composer vendors directory for a full reinstall -->
    <target name="composer-purge-vendors" if="${PURGE_VENDORS}">
        <echo>Purging composer vendors directory for a full reinstall...</echo>
        <delete dir="${basedir}/vendor"/>
    </target>

</project>
